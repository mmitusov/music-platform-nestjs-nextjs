//Создаем класс и помечаем его декоратором Controller.
//В идиале в контроллере мы должны взаимодействовать только с запросами и ответами
//Параметром в Controller передаем маршрут, по которому будут отрабатывать запросы которые мы опишем в классе. Например - '/api'
//Функции которые находятся нутри класса, мы помечаем мы будет помечать декораторами @Get, @Post и т.д
//Так мы сообщаем, какой из методов будет прослушивать та или иная функция - get, post и т.д
//Чтобы проверить все ли работает - создадим тестовый get запрос с сообщением - return "TEST MESSAGE"
//Но чтобы наш Контроллер заработал, его необходимо сперва зарегестрировать в родительском модуле - app.module.ts
//Чтобы проверить работоспособность сервера, перезгрузим его, и теперь в баузере по ссылки http://localhost:3000, должно отобразиться сообщение - TEST MESSAGE

//constructor(private appService: AppService)
//appService: - ведет себя как переменная, название может быть любым, просто даемя знать, что мы ожидаем инжектирование класса, с каким-то именем
//AppService - это тип на базе класса, который мы хотим инжектировать. 
//Как раз таки именно его мы и импортируем. И по нему NextJs понимает с каким именно классом он будет работать: import { AppService } from "./app.service";
//Но понимание NextJs с каким классом работать берется также и потому, что мы ранее импортировали этот класс в родительский модуль - app.module.ts

import { Controller, Get } from "@nestjs/common";
import { AppService } from "./app.service";

@Controller('/api')
export class AppController {
    constructor(private readonly appService: AppService) {}

    @Get()
    getUsers() {
        return this.appService.getUsers()
    }
}